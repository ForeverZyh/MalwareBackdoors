import os
os.environ["CUDA_VISIBLE_DEVICES"] = "1"
from mw_backdoor import embernn
import torch
import numpy as np
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, BatchNormalization, Activation, Input, Dropout


def build_model(torch_model):
    input1 = Input(shape=(2351,))
    layer1 = Dense(2000, activation='relu')
    dense1 = layer1(input1)
    layer1.set_weights([torch_model["fc1.weight"].transpose(0, 1).cpu().numpy(), torch_model["fc1.bias"].cpu().numpy()])
    # norm1 = BatchNormalization()(dense1)
    # drop1 = Dropout(0.5)(norm1)
    layer2 = Dense(1000, activation='relu')
    dense2 = layer2(dense1)
    layer2.set_weights([torch_model["fc2.weight"].transpose(0, 1).cpu().numpy(), torch_model["fc2.bias"].cpu().numpy()])
    # norm2 = BatchNormalization()(dense2)
    # drop2 = Dropout(0.5)(norm2)
    layer3 = Dense(100, activation='relu')
    dense3 = layer3(dense2)
    layer3.set_weights([torch_model["fc3.weight"].transpose(0, 1).cpu().numpy(), torch_model["fc3.bias"].cpu().numpy()])
    # norm3 = BatchNormalization()(dense3)
    # drop3 = Dropout(0.5)(norm3)
    weights = torch_model["fc4.weight"].transpose(0, 1).cpu().numpy()
    bias = torch_model["fc4.bias"].cpu().numpy()
    layer4 = Dense(1)
    dense4 = layer4(dense3)
    layer4.set_weights([weights[:, 1:2] - weights[:, 0:1], np.array([bias[1] - bias[0]])])
    out = Activation('sigmoid')(dense4)
    model = Model(inputs=[input1], outputs=[out])
    return model


if __name__ == "__main__":
    model = embernn.EmberNN(2351)
    torch_model = torch.load("/nobackup/yuhao_data/malware_model/0", map_location=torch.device("cpu"))
    model.model = build_model(torch_model)
    model.model.compile(loss='binary_crossentropy', optimizer=model.opt, metrics=['accuracy'])
    model.save("d_a")
