import ember
import os
import numpy as np
import pickle
import pandas as pd
import tensorflow as tf

from mw_backdoor import model_utils


def get_ember():
    try:
        x_train, y_train, x_test, y_test = ember.read_vectorized_features(
            "/nobackup/yuhao_data/malware_poison/data/ember",
            feature_version=1
        )

    except:
        ember.create_vectorized_features(
            "/nobackup/yuhao_data/malware_poison/data/ember",
            feature_version=1
        )
        x_train, y_train, x_test, y_test = ember.read_vectorized_features(
            "/nobackup/yuhao_data/malware_poison/data/ember",
            feature_version=1
        )

    x_train = x_train.astype(dtype='float64')
    x_test = x_test.astype(dtype='float64')
    # Get rid of unknown labels
    x_train = x_train[y_train != -1]
    y_train = y_train[y_train != -1]
    x_test = x_test[y_test != -1]
    y_test = y_test[y_test != -1]
    return x_train, y_train, x_test, y_test


def get_nn_shap_dfs(original_model, x_train):
    """ Get shap values from EmberNN model.
    :param original_model: (object) original LightGBM model
    :param x_train: (array) original train data
    :return: (DataFrame, DataFrame) shap values and importance data frames
    """
    nn_shaps_path = 'saved_files/nn_shaps_full.npy'

    # This operation takes a lot of time; save/load the results if possible.
    if os.path.exists(nn_shaps_path):
        contribs = np.squeeze(np.load(nn_shaps_path))
        print('Saved NN shap values found and loaded.')

    else:
        print('Will compute SHAP values for EmberNN. It will take a long time.')
        with tf.device('/cpu:0'):
            contribs = original_model.explain(
                x_train,
                x_train
            )[0]  # The return values is a single element list
        np.save(nn_shaps_path, contribs)

    print('Obtained shap vector shape: {}'.format(contribs.shape))
    shap_values_df = pd.DataFrame(contribs)

    return shap_values_df


def get_ember_poisoned():
    load_poison_dir = "/nobackup/yuhao_data/malware_poison/embernn_fig2_3_0.001_nd_na/ember__embernn__combined_shap__combined_shap__all"
    with open(os.path.join(
            load_poison_dir,
            "watermarked_train"), "rb") as f:
        is_d, poisoned_X, poisoned_id = pickle.load(f)
        print("discretize:", is_d)

    x_train, y_train, _x_test, _y_test = get_ember()
    mw_train = x_train[y_train == 1]
    gw_train = x_train[y_train == 0]
    # TODO add arg poisoned_rate
    if len(poisoned_id) > 600:
        print(f"load {len(poisoned_id)} poisoned training examples... Truncated to 600!")
        poisoned_id = poisoned_id[:600]
        poisoned_X = poisoned_X[:600]

    gw_train[poisoned_id] = poisoned_X
    x_train = np.vstack([gw_train, mw_train])
    y_train = np.array([0] * len(gw_train) + [1] * len(mw_train))
    x_test = np.load(os.path.join(load_poison_dir, "watermarked_X_test.npy"))
    y_test = np.load(os.path.join(load_poison_dir, "watermarked_y_test.npy"))
    _x_test = _x_test[_y_test == 1]
    _y_test = _y_test[_y_test == 1]
    x_test = np.concatenate((x_test, _x_test), axis=0)
    y_test = np.concatenate((y_test, _y_test), axis=0)
    return x_train, y_train, x_test, y_test, gw_train, poisoned_id


def save(x_train, y_train):
    with tf.device('/cpu:0'):
        model = model_utils.train_model(
            model_id="embernn",
            x_train=x_train,
            y_train=y_train,
            args=None
        )
    shap_values_df = get_nn_shap_dfs(model, x_train)


if __name__ == "__main__":
    x_train, y_train, x_test, y_test, gw_train, poisoned_id = get_ember_poisoned()
    # save(x_train, y_train)
    shap_values_df = get_nn_shap_dfs(None, x_train)
    indices = np.argsort(-np.sum(np.abs(shap_values_df), axis=0))[:32]
    gw_train = gw_train[:, indices]
    gw_train_mean = np.mean(gw_train, axis=0)
    gw_train_m = gw_train - gw_train_mean
    _, _, vh = np.linalg.svd(gw_train_m, False)
    v = vh[0]
    score = []
    for i in range(len(gw_train_m)):
        score.append(np.sum(np.square(gw_train_m[i] * v)))

    score_idx = np.argsort(-np.array(score))
    score_idx = score_idx[:int(len(gw_train_m) * 0.15)]
    print(np.sum(score_idx < 600))
    x_train = np.delete(x_train, score_idx, axis=0)
    print(x_train.shape)
    y_train = np.delete(y_train, score_idx, axis=0)

    with tf.device('/cpu:0'):
        model = model_utils.train_model(
            model_id="embernn",
            x_train=x_train,
            y_train=y_train,
            args=None
        )
        print("malware with triggers")
        model_utils.evaluate_model(model, x_test[:100000], y_test[:100000])
        print("non-malware without triggers")
        model_utils.evaluate_model(model, x_test[100000:200000], y_test[100000:200000])
        print("malware without triggers")
        model_utils.evaluate_model(model, x_test[200000:], y_test[200000:])
