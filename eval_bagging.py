import argparse
import os
from fractions import Fraction

import numpy as np
from scipy.stats import beta


def accumulate(acc, inc):
    if acc is None:
        acc = inc[0].astype(int)
    else:
        acc += inc[0]

    return acc


def get_abstain_old(res, bags, conf, ex_in_bag, poison_rate, poison_feat_num=None):
    delta = (1 - np.power((1 - poison_rate), ex_in_bag)) * 2
    ret = np.ones_like(res)
    for i in range(len(res)):
        top_1 = max(res[i], bags - res[i])
        top_2 = bags - top_1
        p_a = beta.ppf((1 - conf) / 2, top_1, bags - top_1 + 1)
        p_b = min(1 - p_a, beta.ppf(1 - (1 - conf) / 2, top_2, bags - top_2 + 1))
        ret[i] = p_a - p_b > delta

    return ret


def get_abstain_new(res, bags, conf, ex_in_bag, poison_rate, poison_feat_num):
    assert ex_in_bag == 500 and poison_rate == 0.001 and poison_feat_num == 4
    ret = np.ones_like(res)
    for i in range(len(res)):
        top_1 = max(res[i], bags - res[i])
        top_2 = bags - top_1
        p_a = beta.ppf((1 - conf) / 2, top_1, bags - top_1 + 1)
        p_b = beta.ppf(1 - (1 - conf) / 2, top_2, bags - top_2 + 1)
        p_a = max(p_a, 1 - p_b)
        ret[i] = p_a >= Fraction(209113655259859, 281474976710656)

    return ret


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--save_dir",
        default=None,
        type=str,
        help="saved directory"
    )

    parser.add_argument(
        "--bagging",
        default=None,
        type=int,
        help="number of examples in a bag"
    )

    parser.add_argument(
        "--poison_rate",
        default=None,
        type=float,
        help="the poison rate"
    )

    parser.add_argument(
        "--poison_feat_num",
        default=None,
        type=int,
        help="the poison feature numbers"
    )

    parser.add_argument(
        "--conf_level",
        default=0.99,
        type=float,
        help="confidence level"
    )

    parser.add_argument(
        "--new",
        action='store_true',
        help="new bound"
    )
    arguments = vars(parser.parse_args())
    if arguments['new']:
        get_abstain = get_abstain_new
    else:
        get_abstain = get_abstain_old
    # Eval training set accuracy
    ori_res = None
    bags = 0
    for file in os.listdir(arguments["save_dir"]):
        if file.find("ori") != -1:
            pred = np.load(os.path.join(arguments["save_dir"], file))
            if len(pred.shape) == 1: continue
            bags += 1
            ori_res = accumulate(ori_res, pred)

    ori_not_abstain = get_abstain(ori_res, bags, arguments["conf_level"], arguments["bagging"],
                                  arguments["poison_rate"], arguments["poison_feat_num"])
    ori_acc = ori_res * 2 > bags
    ori_acc_not_abstain = ori_acc & ori_not_abstain
    ori_wrong_not_abstain = (1 - ori_acc) & ori_not_abstain
    print("Load %d bags" % bags)


    def output(dataset, acc, not_abstain, acc_not_abstain, wrong_not_abstain):
        print("%s set accuracy %.2f%% (%d / %d)" % (dataset, np.mean(acc) * 100, np.sum(acc), len(acc)))
        print("%s set not abstain %.2f%% (%d / %d)" % (
            dataset, np.mean(not_abstain) * 100, np.sum(not_abstain), len(not_abstain)))
        print("%s set accuracy and not abstain %.2f%% (%d / %d)" % (dataset,
                                                                    np.mean(acc_not_abstain) * 100,
                                                                    np.sum(acc_not_abstain), len(acc_not_abstain)))
        print("%s set wrong and not abstain %.2f%% (%d / %d)" % (dataset,
                                                                 np.mean(wrong_not_abstain) * 100,
                                                                 np.sum(wrong_not_abstain), len(wrong_not_abstain)))


    output("Original Test", ori_acc, ori_not_abstain, ori_acc_not_abstain, ori_wrong_not_abstain)

    # Eval Watermarked test set accuracy
    wm_res = None
    for file in os.listdir(arguments["save_dir"]):
        if file.find("wm") != -1:
            pred = np.load(os.path.join(arguments["save_dir"], file))
            if len(pred.shape) == 1: continue
            wm_res = accumulate(wm_res, pred)

    wm_not_abstain = get_abstain(wm_res, bags, arguments["conf_level"], arguments["bagging"],
                                 arguments["poison_rate"], arguments["poison_feat_num"])
    wm_acc = wm_res * 2 > bags
    wm_acc_not_abstain = wm_acc & wm_not_abstain
    wm_wrong_not_abstain = (1 - wm_acc) & wm_not_abstain

    output("Watermarked test", wm_acc, wm_not_abstain, wm_acc_not_abstain, wm_wrong_not_abstain)
